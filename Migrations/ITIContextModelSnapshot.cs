// <auto-generated />
using System;
using EF_2;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EF_2.Migrations
{
    [DbContext(typeof(ITIContext))]
    partial class ITIContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EF_2.Entitys.Course", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Top_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Top_id")
                        .IsUnique();

                    b.ToTable("Course");
                });

            modelBuilder.Entity("EF_2.Entitys.CourseInstructor", b =>
                {
                    b.Property<int>("Course_id")
                        .HasColumnType("int");

                    b.Property<int>("Inst_id")
                        .HasColumnType("int");

                    b.Property<string>("Evaluation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Course_id", "Inst_id");

                    b.HasIndex("Inst_id");

                    b.ToTable("CourseInstructor");
                });

            modelBuilder.Entity("EF_2.Entitys.Department", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("Hire_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("EF_2.Entitys.Instructor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("Bouns")
                        .HasColumnType("int");

                    b.Property<double>("HoureRate")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Instructor");
                });

            modelBuilder.Entity("EF_2.Entitys.InstructorDepartments", b =>
                {
                    b.Property<int>("Inst_id")
                        .HasColumnType("int");

                    b.Property<int>("Dept_id")
                        .HasColumnType("int");

                    b.HasKey("Inst_id", "Dept_id");

                    b.HasIndex("Dept_id");

                    b.ToTable("InstructorDepartments");
                });

            modelBuilder.Entity("EF_2.Entitys.Student", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("Dept_id")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Dept_id")
                        .IsUnique();

                    b.ToTable("Student");
                });

            modelBuilder.Entity("EF_2.Entitys.StudentCourse", b =>
                {
                    b.Property<int>("Stud_id")
                        .HasColumnType("int");

                    b.Property<int>("Course_id")
                        .HasColumnType("int");

                    b.Property<double>("Grade")
                        .HasColumnType("float");

                    b.HasKey("Stud_id", "Course_id");

                    b.HasIndex("Course_id");

                    b.ToTable("StudentCourse");
                });

            modelBuilder.Entity("EF_2.Entitys.Topic", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Topic");
                });

            modelBuilder.Entity("EF_2.Entitys.Course", b =>
                {
                    b.HasOne("EF_2.Entitys.Topic", "Topic")
                        .WithOne("Course")
                        .HasForeignKey("EF_2.Entitys.Course", "Top_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("EF_2.Entitys.CourseInstructor", b =>
                {
                    b.HasOne("EF_2.Entitys.Course", "Course")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("Course_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_2.Entitys.Instructor", "Instructor")
                        .WithMany("InstructorCourses")
                        .HasForeignKey("Inst_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("EF_2.Entitys.InstructorDepartments", b =>
                {
                    b.HasOne("EF_2.Entitys.Department", "Department")
                        .WithMany("DepartmentsInstructor")
                        .HasForeignKey("Dept_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_2.Entitys.Instructor", "Instructor")
                        .WithMany("InstructorsDepartment")
                        .HasForeignKey("Inst_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("EF_2.Entitys.Student", b =>
                {
                    b.HasOne("EF_2.Entitys.Department", "Department")
                        .WithOne("Student")
                        .HasForeignKey("EF_2.Entitys.Student", "Dept_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EF_2.Entitys.StudentCourse", b =>
                {
                    b.HasOne("EF_2.Entitys.Course", "Course")
                        .WithMany("CourseStudents")
                        .HasForeignKey("Course_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_2.Entitys.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("Stud_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EF_2.Entitys.Course", b =>
                {
                    b.Navigation("CourseInstructors");

                    b.Navigation("CourseStudents");
                });

            modelBuilder.Entity("EF_2.Entitys.Department", b =>
                {
                    b.Navigation("DepartmentsInstructor");

                    b.Navigation("Student")
                        .IsRequired();
                });

            modelBuilder.Entity("EF_2.Entitys.Instructor", b =>
                {
                    b.Navigation("InstructorCourses");

                    b.Navigation("InstructorsDepartment");
                });

            modelBuilder.Entity("EF_2.Entitys.Student", b =>
                {
                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("EF_2.Entitys.Topic", b =>
                {
                    b.Navigation("Course")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
